{"version":3,"sources":["store/actions.ts","store/index.ts","store/selectors.ts","components/CurrentUser/CurrentUser.tsx","api/api.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionType","setTodosAction","payload","type","SET_TODOS","setUserAction","SET_USER","initialState","todos","user","store","createStore","state","action","REMOVE_USER","getTodosSelector","getUserSelector","CurrentUser","useSelector","dispatch","useDispatch","className","id","onClick","name","email","phone","BASE_API","getTodos","a","fetch","resporse","json","getUser","userId","response","deleteTodo","todoId","method","TodoList","useState","title","setTitle","status","setStatus","selectedUser","filteredTodos","filter","todo","includes","useEffect","loadTodosFromServer","todosFromServer","error","console","log","getUserById","todoRemover","value","onChange","target","allTodos","completed","filteredTodosByStatus","map","classNames","readOnly","checked","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22f62cf2.chunk.js","sourcesContent":["import { Todo, User } from '../react-app-env';\n\nexport enum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  SET_USER = 'SET_USER',\n  REMOVE_USER = 'REMOVE_USER',\n}\n\nexport interface SetTodosAction {\n  type: ActionType.SET_TODOS,\n  payload: Todo[],\n}\n\nexport interface SetUserAction {\n  type: ActionType.SET_USER,\n  payload: User,\n}\n\nexport interface RemoveUserAction {\n  type: ActionType.REMOVE_USER,\n}\n\nexport type Action = SetTodosAction | SetUserAction | RemoveUserAction;\n\nexport const setTodosAction = (payload: Todo[]) => ({\n  type: ActionType.SET_TODOS,\n  payload,\n});\n\nexport const setUserAction = (payload: User | null) => ({\n  type: ActionType.SET_USER,\n  payload,\n});\n\nexport const removeUserAction = () => ({\n  type: ActionType.REMOVE_USER,\n});\n","import { createStore } from 'redux';\nimport { State } from '../react-app-env';\nimport {\n  Action,\n  ActionType,\n} from './actions';\n\nexport const initialState: State = {\n  todos: [],\n  user: null,\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case ActionType.SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case ActionType.REMOVE_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","import { State } from '../react-app-env';\n\nexport const getTodosSelector = (state: State) => state.todos;\n\nexport const getUserSelector = (state: State) => state.user;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeUserAction } from '../../store/actions';\nimport { getUserSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const user = useSelector(getUserSelector);\n  const dispatch = useDispatch();\n\n  if (!user) {\n    return <p>No user selected</p>;\n  }\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>{`Selected user: ${user.id}`}</span>\n      </h2>\n      <button\n        type=\"button\"\n        onClick={() => {\n          dispatch(removeUserAction());\n        }}\n      >\n        Clear\n      </button>\n\n      <h3 data-cy=\"userName\" className=\"CurrentUser__name\">{user.name}</h3>\n      <p className=\"CurrentUser__email\">{user.email}</p>\n      <p className=\"CurrentUser__phone\">{user.phone}</p>\n    </div>\n  );\n};\n","import { Todo, User } from '../react-app-env';\n\nconst BASE_API = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const resporse = await fetch(`${BASE_API}/todos`);\n\n  return resporse.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${BASE_API}/users/${userId}`);\n\n  return response.json();\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  const response = await fetch(`${BASE_API}/todos/${todoId}`, { method: 'DELETE' });\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nimport { setTodosAction, setUserAction } from '../../store/actions';\nimport { getTodosSelector, getUserSelector } from '../../store/selectors';\n\nimport { deleteTodo, getTodos, getUser } from '../../api/api';\n\nimport { Todo } from '../../react-app-env';\n\nexport const TodoList: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [status, setStatus] = useState('');\n\n  const dispatch = useDispatch();\n\n  const selectedUser = useSelector(getUserSelector);\n\n  const todos = useSelector(getTodosSelector);\n  const filteredTodos = todos.filter(todo => todo.title.includes(title));\n\n  const filteredTodosByStatus = (allTodos: Todo[]) => {\n    switch (status) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  useEffect(() => {\n    try {\n      const loadTodosFromServer = async () => {\n        const todosFromServer = await getTodos();\n\n        dispatch(setTodosAction(todosFromServer));\n      };\n\n      loadTodosFromServer();\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  }, []);\n\n  const getUserById = async (userId: number) => {\n    try {\n      const user = await getUser(userId);\n\n      dispatch(setUserAction(user));\n    } catch (error) {\n      dispatch(setUserAction(null));\n      // eslint-disable-next-line no-console\n      console.log(error);\n    }\n  };\n\n  const todoRemover = async (todoId: number) => {\n    await deleteTodo(todoId);\n    const todosFromServer = await getTodos();\n\n    dispatch(setTodosAction(todosFromServer));\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <p>Filter todos by title</p>\n        <input\n          type=\"text\"\n          value={title}\n          data-cy=\"filterByTitle\"\n          onChange={({ target }) => {\n            setTitle(target.value);\n          }}\n        />\n        <p>Filter todos by status</p>\n        <select\n          onChange={({ target }) => {\n            setStatus(target.value);\n          }}\n        >\n          <option value=\"all\">\n            All todos\n          </option>\n          <option value=\"active\">\n            Active todos\n          </option>\n          <option value=\"completed\">\n            Completed todos\n          </option>\n        </select>\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodosByStatus(filteredTodos).map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames('TodoList__item', {\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n              <div className=\"button-container\">\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected':\n                      selectedUser?.id === todo.userId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    getUserById(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"button button--close\"\n                  onClick={() => {\n                    todoRemover(todo.id);\n                  }}\n                >\n                  X\n                </button>\n              </div>\n\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","// import { useSelector } from 'react-redux';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          <CurrentUser />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}